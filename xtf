#!/bin/bash                   
# xhricma00 Marek Hric
# 07.03.2024


export POSIXLY_CORRECT=yes 
export LC_ALL=C 

usage(){
    echo "Usage: $(basename "$0") [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]]
        
    COMMAND may be one of:
        list - a listing of records for a given user.
        list-currency - a listing of a sorted list of occurring currencies.
        status - a listing of the actual account status grouped and sorted by currency.
        profit - a statement of the customer's account status with notional profit included.
    FILTER can be a combination of the following:
        -a DATETIME - after: only records AFTER this date and time (without it) are considered. DATETIME is of format YYYY-MM-DD HH:MM:SS.
        -b DATETIME - before: only records BEFORE this date and time (without it) are considered.
        -c CURRENCY - only records corresponding to the given currency are considered.
    -h and --help print a help message with a short description of each command and switch."
    exit 0
}

ab_set_error(){
    # $1 - a or b
    echo "Error: Option $1 set multiple times" >&2
    exit 1
}

two_names_set_error(){
    echo "Error: Two names set" >&2
    exit 1
}

two_commands_error(){
    echo "Error: Two commands set" >&2
    exit 1
}

currency_format_error(){
    # $1 - invalid currency code
    echo "Error: Invalid currency format: $1" >&2
    exit 1
}

date_validation(){
    # $1 - date to be checked
    r=$(date -d "$1" +"%Y-%m-%d %H:%M:%S"  2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "Error: Invalid date format: $1" >&2
        exit 1
    fi
}

currency_validation(){
    # $1 - currency code to be checked
    local currency_regex="^[A-Za-z]{3}$"
    if [[ ! "$1" =~ $currency_regex ]]; then
        currency_format_error "$1"
    fi

}

if [ -z "$XTF_PROFIT" ]; then
    XTF_PROFIT=20
fi

files=() #array of files

user=""
command=""
a_flag=false
date_filter_after="0000-01-01 00:00:00"
b_flag=false
date_filter_before="9999-12-31 23:59:59"
c_flag_regex=""

while [ -n "$1" ]; do
    case "$1" in 
        -h|--help)
            usage 
            ;;
        -a)
            if [ $a_flag = true ]; then
                ab_set_error "$1"
            fi
            a_flag=true
            shift
            date_validation "$1"
            date_filter_after="$1"
            ;; 
        -b)
            if [ $b_flag = true ]; then
                ab_set_error "$1"
            fi
            b_flag=true
            shift
            date_validation "$1"
            date_filter_before="$1"
            ;;
        -c)
            shift
            currency_validation "$1"
            if [ "$c_flag_regex" == "" ]; then
                c_flag_regex="$1"
            else
                c_flag_regex="$c_flag_regex|$1"
            fi
            ;; 
        list|list-currency|status|profit)
            if [ -z "$command" ]; then
                command="$1"
                if [ "$command" == "list-currency" ]; then
                    command="list_currency"
                fi
            else
                two_commands_error 
            fi
           ;;
        *)
            if [ -f "$1" ]; then
                files+=("$1")
            elif [ -z "$user" ]; then
                user="$1"
            else 
                two_names_set_error
            fi
            ;;
    esac
    shift
done

if [ -z "$command" ]; then
    command="list"
fi

if [ -z "$user" ]; then
    echo "Error: No user specified." >&2
    exit 1
fi

if [ ${#files[@]} -eq 0 ]; then
    echo "Error: No log files" >&2
    exit 1
fi


line_regex="^[^;]+;[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]) ([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]);[A-Za-z]{3};-?[0-9]+(\\.[0-9]+)?$"

if [ -z "$c_flag_regex" ];then
    c_flag_regex='.*'
else 
    c_flag_regex="^$c_flag_regex$"
fi


for file in "${files[@]}"; do
    if [[ "$file" == *.gz ]]; then
        read="zcat"
    else 
        read="cat"
    fi
    
    $read "$file" | awk -v line_regex="$line_regex" '
    ($0 !~ line_regex) {
        print "Invalid file" > "/dev/stderr"
        exit 1
    }' 
 
    if [[ $? == 1 ]]; then 
        exit 1
    fi
done

list(){
    for file in "${files[@]}"; do
        if [[ ! -r "$file" ]]; then
            echo "File ""$file"" not readable" >&2
            exit 1
        fi

        if [[ "$file" == *.gz ]]; then
        read="zcat"
    else 
        read="cat"
    fi

    $read "$file" | awk -F";" '
        $1 == user { 
            date = $2
            if (date <= date_after) next
            if (date >= date_before) next
            if ($3 !~ currencies) next

            print 
        }

    ' user="$user"  date_after="$date_filter_after" date_before="$date_filter_before" currencies="$c_flag_regex"
    done
}

list_currency(){
    list | awk -F";" '{print $3}' | sort -u
}

status(){
    list | awk -F";" '{
        if ($3 in codes) {
            codes[$3] += $4
        } else {
            codes[$3] = $4
        }
    }
    
    END{
        for (c in codes){
            printf "%s : %.4f\n", c, codes[c]
        }
    }' | sort

}

profit(){
    status | awk -F" : " -v profit="$XTF_PROFIT" '
    BEGIN{
        profit /= 100
        profit += 1
    }
    {
        val = $2
        if (val > 0) val *= profit
        code = $1
        printf "%s : %.4f\n", code, val
    }'
}

$command
